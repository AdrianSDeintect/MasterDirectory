{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/TecnologiasInformacion/CatalogosTIColumns.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CatalogosTIRow.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CatalogosTIService.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CategoriaTIColumns.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CategoriaTIRow.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CategoriaTIService.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CatalogosTIForm.ts", "../../../Modules/ServerTypes/TecnologiasInformacion/CategoriaTIForm.ts"],
  "sourcesContent": ["\uFEFFexport class CatalogosTIColumns {\r\n    static columnsKey = 'TecnologiasInformacion.CatalogosTI';\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CatalogosTIRow {\n    IdCons?: number;\n    IdtipoCatalogo?: number;\n    IdClave?: number;\n    Descripcion?: string;\n    Activo?: number;\n    NombreTipoCatalogo?: string;\n}\n\nexport abstract class CatalogosTIRow {\n    static readonly idProperty = 'IdCons';\n    static readonly nameProperty = 'Descripcion';\n    static readonly localTextPrefix = 'TecnologiasInformacion.CatalogosTI';\n    static readonly deletePermission = 'TecnologiasInformacion:Delete';\n    static readonly insertPermission = 'TecnologiasInformacion:Modify';\n    static readonly readPermission = 'TecnologiasInformacion:View';\n    static readonly updatePermission = 'TecnologiasInformacion:Modify';\n\n    static readonly Fields = fieldsProxy<CatalogosTIRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CatalogosTIRow } from \"./CatalogosTIRow\";\n\nexport namespace CatalogosTIService {\n    export const baseUrl = 'TecnologiasInformacion/CatalogosTI';\n\n    export declare function Create(request: SaveRequest<CatalogosTIRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CatalogosTIRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CatalogosTIRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CatalogosTIRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"TecnologiasInformacion/CatalogosTI/Create\",\n        Update: \"TecnologiasInformacion/CatalogosTI/Update\",\n        Delete: \"TecnologiasInformacion/CatalogosTI/Delete\",\n        Retrieve: \"TecnologiasInformacion/CatalogosTI/Retrieve\",\n        List: \"TecnologiasInformacion/CatalogosTI/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>CatalogosTIService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFexport class CategoriaTIColumns {\r\n    static columnsKey = 'TecnologiasInformacion.CategoriaTI';\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriaTIRow {\n    LocalSap?: string;\n    UsuarioGeo?: string;\n    Emaillocal?: string;\n    Extension?: string;\n    Telefono?: string;\n}\n\nexport abstract class CategoriaTIRow {\n    static readonly idProperty = 'LocalSap';\n    static readonly nameProperty = 'LocalSap';\n    static readonly localTextPrefix = 'TecnologiasInformacion.CategoriaTI';\n    static readonly deletePermission = 'TecnologiasInformacion:Delete';\n    static readonly insertPermission = 'TecnologiasInformacion:Modify';\n    static readonly readPermission = 'TecnologiasInformacion:View';\n    static readonly updatePermission = 'TecnologiasInformacion:Modify';\n\n    static readonly Fields = fieldsProxy<CategoriaTIRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { CategoriaTIRow } from \"./CategoriaTIRow\";\nimport { ExcelImportRequest, ExcelImportResponse } from \"@serenity-is/extensions\";\n\nexport namespace CategoriaTIService {\n    export const baseUrl = 'TecnologiasInformacion/CategoriaTI';\n\n    export declare function Create(request: SaveRequest<CategoriaTIRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<CategoriaTIRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<CategoriaTIRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<CategoriaTIRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ExcelImport(request: ExcelImportRequest, onSuccess?: (response: ExcelImportResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"TecnologiasInformacion/CategoriaTI/Create\",\n        Update: \"TecnologiasInformacion/CategoriaTI/Update\",\n        Delete: \"TecnologiasInformacion/CategoriaTI/Delete\",\n        Retrieve: \"TecnologiasInformacion/CategoriaTI/Retrieve\",\n        List: \"TecnologiasInformacion/CategoriaTI/List\",\n        ExcelImport: \"TecnologiasInformacion/CategoriaTI/ExcelImport\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'ExcelImport'\n    ].forEach(x => {\n        (<any>CategoriaTIService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { LookupEditor, IntegerEditor, StringEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CatalogosTIForm {\n    IdtipoCatalogo: LookupEditor;\n    IdClave: IntegerEditor;\n    Descripcion: StringEditor;\n    Activo: BooleanEditor;\n}\n\nexport class CatalogosTIForm extends PrefixedContext {\n    static formKey = 'TecnologiasInformacion.CatalogosTI';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CatalogosTIForm.init)  {\n            CatalogosTIForm.init = true;\n\n            var w0 = LookupEditor;\n            var w1 = IntegerEditor;\n            var w2 = StringEditor;\n            var w3 = BooleanEditor;\n\n            initFormType(CatalogosTIForm, [\n                'IdtipoCatalogo', w0,\n                'IdClave', w1,\n                'Descripcion', w2,\n                'Activo', w3\n            ]);\n        }\n    }\n}", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface CategoriaTIForm {\n    LocalSap: StringEditor;\n    UsuarioGeo: StringEditor;\n    Emaillocal: StringEditor;\n    Extension: StringEditor;\n    Telefono: StringEditor;\n}\n\nexport class CategoriaTIForm extends PrefixedContext {\n    static formKey = 'TecnologiasInformacion.CategoriaTI';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!CategoriaTIForm.init)  {\n            CategoriaTIForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(CategoriaTIForm, [\n                'LocalSap', w0,\n                'UsuarioGeo', w0,\n                'Emaillocal', w0,\n                'Extension', w0,\n                'Telefono', w0\n            ]);\n        }\n    }\n}"],
  "mappings": "6DAAQ,IAAMA,EAAN,KAAyB,CAEjC,EAFcC,EAAAD,EAAA,sBAAAA,EACH,WAAa,qCCDvB,IAAAE,EAA4B,SAWtB,IAAeC,EAAf,KAA8B,CAUrC,EAVsBC,EAAAD,EAAA,kBAAAA,EACF,WAAa,SADXA,EAEF,aAAe,cAFbA,EAGF,gBAAkB,qCAHhBA,EAIF,iBAAmB,gCAJjBA,EAKF,iBAAmB,gCALjBA,EAMF,eAAiB,8BANfA,EAOF,iBAAmB,gCAPjBA,EASF,UAAS,eAA4B,ECpBxD,IAAAE,EAAuK,SAGvJC,OACAA,EAAA,QAAU,qCAQVA,EAAA,QAAU,CACnB,OAAQ,4CACR,OAAQ,4CACR,OAAQ,4CACR,SAAU,8CACV,KAAM,yCACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAoBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC9C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCHT,IAAMK,EAAN,KAAyB,CAEjC,EAFcC,EAAAD,EAAA,sBAAAA,EACH,WAAa,qCCDvB,IAAAE,EAA4B,SAUtB,IAAeC,EAAf,KAA8B,CAUrC,EAVsBC,EAAAD,EAAA,kBAAAA,EACF,WAAa,WADXA,EAEF,aAAe,WAFbA,EAGF,gBAAkB,qCAHhBA,EAIF,iBAAmB,gCAJjBA,EAKF,iBAAmB,gCALjBA,EAMF,eAAiB,8BANfA,EAOF,iBAAmB,gCAPjBA,EASF,UAAS,eAA4B,ECnBxD,IAAAE,EAAuK,SAIvJC,OACAA,EAAA,QAAU,qCASVA,EAAA,QAAU,CACnB,OAAQ,4CACR,OAAQ,4CACR,OAAQ,4CACR,SAAU,8CACV,KAAM,0CACN,YAAa,gDACjB,EAEA,CACI,SACA,SACA,SACA,WACA,OACA,aACJ,EAAE,QAAQC,GAAK,CACLD,EAAoBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC9C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA9BYJ,MAAA,KCJhB,IAAAK,EAA0F,SAC3FC,EAA6B,SAStB,IAAMC,EAAN,cAA8B,iBAAgB,CAIjD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAgB,KAAO,CACxBA,EAAgB,KAAO,GAEvB,IAAIE,EAAK,eACLC,EAAK,gBACLC,EAAK,eACLC,EAAK,mBAET,gBAAaL,EAAiB,CAC1B,iBAAkBE,EAClB,UAAWC,EACX,cAAeC,EACf,SAAUC,CACd,CAAC,CACL,CACJ,CACJ,EAvBaC,EAANN,EAAMO,EAAAD,EAAA,mBAAAA,EACF,QAAU,qCCXpB,IAAAE,EAA8C,SAC/CC,EAA6B,SAUtB,IAAMC,EAAN,cAA8B,iBAAgB,CAIjD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAgB,KAAO,CACxBA,EAAgB,KAAO,GAEvB,IAAIE,EAAK,kBAET,gBAAaF,EAAiB,CAC1B,WAAYE,EACZ,aAAcA,EACd,aAAcA,EACd,YAAaA,EACb,WAAYA,CAChB,CAAC,CACL,CACJ,CACJ,EArBaC,EAANH,EAAMI,EAAAD,EAAA,mBAAAA,EACF,QAAU",
  "names": ["CatalogosTIColumns", "__name", "import_q", "CatalogosTIRow", "__name", "import_q", "CatalogosTIService", "x", "r", "s", "o", "CategoriaTIColumns", "__name", "import_q", "CategoriaTIRow", "__name", "import_q", "CategoriaTIService", "x", "r", "s", "o", "import_corelib", "import_q", "_CatalogosTIForm", "prefix", "w0", "w1", "w2", "w3", "CatalogosTIForm", "__name", "import_corelib", "import_q", "_CategoriaTIForm", "prefix", "w0", "CategoriaTIForm", "__name"]
}
